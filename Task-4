from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Calculate the cosine similarity between users
user_similarity = cosine_similarity(data.fillna(0))
np.fill_diagonal(user_similarity, 0)  # Set the diagonal to 0 to ignore self-similarity

# Convert similarity matrix to a DataFrame for easier manipulation
user_similarity_df = pd.DataFrame(user_similarity, index=data.index, columns=data.index)

def get_recommendations(user_id, num_recommendations=5):
    # Get the most similar users to the given user
    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[:num_recommendations]
    
    # Calculate the weighted average of ratings from similar users
    similar_users_ratings = data.loc[similar_users.index]
    weighted_sum = similar_users_ratings.T.dot(similar_users)
    recommendation_scores = weighted_sum / similar_users.sum()
    
    # Recommend items that the user hasn't interacted with yet
    user_rated_items = data.loc[user_id].dropna().index
    recommendations = recommendation_scores.drop(user_rated_items).sort_values(ascending=False).head(num_recommendations)
    
    return recommendations

# Example: Get recommendations for a user with ID 'user_1'
recommendations = get_recommendations('user_1')
print("Recommended Items:", recommendations)
